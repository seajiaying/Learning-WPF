<Window x:Class="Youtube_WPF.Views.UpdateSourceTrigger"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Youtube_WPF.Views"
        mc:Ignorable="d"
        Title="UpdateSourceTrigger" Height="130" Width="310">

    
    
    <!--Reference: https://www.wpf-tutorial.com/data-binding/the-update-source-trigger-property/-->
    
    <StackPanel Margin="15">
        <!--each of the three textboxes now uses a different UpdateSourceTrigger
        Try running the example on your own machine and see how the three textboxes act completely different: 
        The first value doesn't update before you click the button, 
        the second value isn't updated until you leave the TextBox, 
        while the third value updates automatically on each keystroke, text change etc.-->
        <WrapPanel>
            <TextBlock Text="Window title:  " />
            <!--The first one is set to Explicit, which basically means that the source won't be updated unless you manually do it. 
            For that reason, I have added a button next to the TextBox, which will update the source value on demand. 
            In the Code-behind, you will find the Click handler, where we use a couple of lines of code to get the binding from 
            the destination control and then call the UpdateSource() method on it.-->
            <TextBox Name="txtWindowTitle" Text="{Binding Title, UpdateSourceTrigger=Explicit}" Width="150" />
            <Button Name="btnUpdateSource" Click="btnUpdateSource_Click" Margin="5,0" Padding="5,0">*</Button>
        </WrapPanel>
        <WrapPanel Margin="0,10,0,0">
            <TextBlock Text="Window dimensions: " />
            <!--The second TextBox uses the LostFocus value, which is actually the default for a Text binding. 
            It means that the source value will be updated each time the destination control loses focus.-->
            <TextBox Text="{Binding Width, UpdateSourceTrigger=LostFocus}" Width="50" />
            <TextBlock Text=" x " />
            <!--The third and last TextBox uses the PropertyChanged value, which means that the source value will be updated each time 
            the bound property changes, which it does in this case as soon as the text changes.-->
            <TextBox Text="{Binding Height, UpdateSourceTrigger=PropertyChanged}" Width="50" />
        </WrapPanel>
    </StackPanel>
</Window>
